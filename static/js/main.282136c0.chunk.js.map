{"version":3,"sources":["style.js","components/qbcheckboxlist.js","components/qbradiolist.js","components/qbtextfield.js","components/quizboard.js","quiz.js","App.js","reportWebVitals.js","index.js"],"names":["textFieldStyle","marginBottom","buttonStyle","QBCheckboxList","props","initialState","choices","map","choice","value","checked","useState","checkboxState","setCheckboxState","style","FormLabel","FormGroup","name","onChange","event","newCheckboxState","target","setInputAnswer","filter","FormControlLabel","control","Checkbox","label","QBRadioList","RadioGroup","Radio","QBTextField","TextField","variant","type","QuizBoard","answerArea","inputAnswer","onAnswerAreaError","message","className","buttonDisabled","answerNotFound","alert","answerIsCorrect","answerIsIncorrect","Array","isArray","length","answer","Paper","elevation","id","statement","Button","disabled","onClick","every","includes","quiz","App","q","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.282136c0.chunk.js","sourcesContent":["export const textFieldStyle = {\r\n    marginBottom: '25px',\r\n};\r\n\r\nexport const buttonStyle = {\r\n    marginBottom: '25px',\r\n};\r\n","import { Checkbox, FormControlLabel, FormGroup, FormLabel } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\n\r\n/**\r\n * クイズテンプレートQuizBoardにて使用するチェックボックスのリスト。\r\n * @param {object} props\r\n * propsのプロパティ一覧:\r\n * - style: object スタイル\r\n * - choices: array 選択肢\r\n * @returns JSX\r\n */\r\nconst QBCheckboxList = (props) => {\r\n    // チェックボックスの状態を管理するフック\r\n    const initialState = props.choices.map(choice => {\r\n        return {\r\n            value: choice.value,\r\n            checked: false,\r\n        }\r\n    });\r\n    const [checkboxState, setCheckboxState] = useState(initialState);\r\n\r\n    // 回答が変更されたときに、回答欄の値を状態関数にセットする処理\r\n    const onChangeEvent = (event) => {\r\n        const newCheckboxState = [...checkboxState].map(choice => {\r\n            if (choice.value === event.target.value) {\r\n                return {\r\n                    value: choice.value,\r\n                    checked: event.target.checked,\r\n                };\r\n            } else {\r\n                return choice;\r\n            }\r\n        });\r\n\r\n        setCheckboxState(newCheckboxState);\r\n        props.setInputAnswer(newCheckboxState.filter(choice => choice.checked).map(choice => choice.value));\r\n    };\r\n\r\n    return (\r\n        <div style={props.style}>\r\n            <FormLabel>答え</FormLabel>\r\n            <FormGroup\r\n                aria-label=\"choices\"\r\n                name=\"choices\"\r\n                onChange={onChangeEvent}\r\n            >\r\n                {props.choices.map(choice => \r\n                    <FormControlLabel key={choice.value} value={choice.value} control={<Checkbox />} label={choice.label} />    \r\n                )}\r\n            </FormGroup>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QBCheckboxList;\r\n","import { FormControlLabel, FormLabel, Radio, RadioGroup } from \"@mui/material\";\r\n\r\n/**\r\n * クイズテンプレートQuizBoardにて使用するラジオボタンのリスト。\r\n * @param {object} props\r\n * propsのプロパティ一覧:\r\n * - style: object スタイル\r\n * - choices: array 選択肢\r\n * @returns JSX\r\n */\r\n const QBRadioList = (props) => {\r\n    // 回答が変更されたときに、回答欄の値を状態関数にセットする処理\r\n    const onChangeEvent = (event) => props.setInputAnswer(event.target.value);\r\n\r\n    return (\r\n        <div style={props.style}>\r\n            <FormLabel>答え</FormLabel>\r\n            <RadioGroup\r\n                aria-label=\"choices\"\r\n                name=\"choices\"\r\n                onChange={onChangeEvent}\r\n            >\r\n                {props.choices.map(choice => \r\n                    <FormControlLabel key={choice.value} value={choice.value} control={<Radio />} label={choice.label} />    \r\n                )}\r\n            </RadioGroup>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QBRadioList;\r\n","import { TextField } from \"@mui/material\";\r\n\r\n/**\r\n * クイズテンプレートQuizBoardにて使用するテキストボックス。\r\n * @param {object} props\r\n * propsのプロパティ一覧:\r\n * - style: object スタイル\r\n * - type: String 入力値の種類（numberなど）\r\n * - setInputAnswer: 入力された回答を親コンポーネントに渡すための状態関数\r\n * @returns JSX\r\n */\r\n const QBTextField = (props) => {\r\n    // 回答が変更されたときに、回答欄の値を状態関数にセットする処理\r\n    const onChangeEvent = (event) => props.setInputAnswer(event.target.value);\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant='standard' style={props.style} label='答え' type={props.type} onChange={onChangeEvent} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QBTextField;\r\n","import { Button, Paper } from '@mui/material';\r\nimport { useState } from 'react';\r\nimport { buttonStyle, textFieldStyle } from '../style';\r\nimport QBCheckboxList from './qbcheckboxlist';\r\nimport QBRadioList from './qbradiolist';\r\nimport QBTextField from './qbtextfield';\r\n\r\n/**\r\n * クイズテンプレート\r\n * @param {object} props クイズの内容\r\n * propsのプロパティ一覧:\r\n * - id: number クイズ番号\r\n * - statement: String 問題文\r\n * - type: String 回答方法\r\n * - choices: array 選択肢（回答方法が 'radio', 'checkbox' の場合は必要）\r\n * - answer: String 正答\r\n * @returns JSX\r\n */\r\nconst QuizBoard = (props) => {\r\n    // 子コンポーネントから入力された回答を取得するための状態フック\r\n    const [inputAnswer, setInputAnswer] = useState();\r\n    \r\n    // 回答欄エラー時処理\r\n    const onAnswerAreaError = (message) => {\r\n        answerArea = <p className='error'>{message}</p>;\r\n        buttonDisabled = true;\r\n    }\r\n\r\n    // 回答未入力時の動作\r\n    const answerNotFound = () => {\r\n        alert('回答を入力してください！');\r\n    };\r\n\r\n    // 正解時の動作\r\n    const answerIsCorrect = () => {\r\n        alert('正解です！　素晴らしい！！');\r\n    }\r\n\r\n    // 正解時の動作\r\n    const answerIsIncorrect = () => {\r\n        alert('残念！　不正解です。');\r\n    }\r\n\r\n    // 答え合わせ処理\r\n    const onAnswerCheck = () => {\r\n        switch (props.type) {\r\n            // number, text, radioは同じ処理を行う\r\n            case 'number':\r\n            case 'text':\r\n            case 'radio':\r\n                if (inputAnswer == null || inputAnswer === '') {\r\n                    // 回答未入力\r\n                    answerNotFound();\r\n                } else if (inputAnswer === props.answer) {\r\n                    // 正解\r\n                    answerIsCorrect();\r\n                } else {\r\n                    // 不正解\r\n                    answerIsIncorrect();\r\n                }\r\n                break;\r\n            case 'checkbox':\r\n                // checkboxの場合、inputAnswerは配列\r\n                if (inputAnswer == null || inputAnswer.length === 0) {\r\n                    // 回答未入力\r\n                    answerNotFound();\r\n                } else if (inputAnswer.length === props.answer.length && inputAnswer.every(answer => props.answer.includes(answer))) {\r\n                    // 正解\r\n                    answerIsCorrect();\r\n                } else {\r\n                    // 不正解\r\n                    answerIsIncorrect();\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    };\r\n\r\n    // 回答方法の設定    \r\n    let answerArea;\r\n    let buttonDisabled = false;     // 答え合わせボタンの制御に使用\r\n    switch (props.type) {\r\n        case 'number':\r\n            // 整数値回答欄\r\n            answerArea = <QBTextField style={textFieldStyle} type='number' setInputAnswer={setInputAnswer} />;\r\n            break;\r\n        case 'text':\r\n            // テキスト式回答欄\r\n            answerArea = <QBTextField style={textFieldStyle} setInputAnswer={setInputAnswer} />;\r\n            break;\r\n        case 'radio':\r\n            // ラジオボタン式回答欄\r\n            if (!Array.isArray(props.choices)) {\r\n                // 選択肢が配列で指定されていない場合\r\n                onAnswerAreaError('選択肢を配列で指定してください。');\r\n            } else if (props.choices.length === 0) {\r\n                // 選択肢の配列が空の場合\r\n                onAnswerAreaError('選択肢を1つ以上指定してください。');\r\n            } else {\r\n                answerArea = <QBRadioList style={textFieldStyle} choices={props.choices} setInputAnswer={setInputAnswer} />;\r\n            }\r\n            break;\r\n        case 'checkbox':\r\n            // チェックボックス式回答欄\r\n            if (!Array.isArray(props.choices)) {\r\n                // 選択肢が配列で指定されていない場合\r\n                onAnswerAreaError('選択肢を配列で指定してください。');\r\n            } else if (props.choices.length === 0) {\r\n                // 選択肢の配列が空の場合\r\n                onAnswerAreaError('選択肢を1つ以上指定してください。');\r\n            } else if (!Array.isArray(props.answer)) {\r\n                // 正答が配列で指定されていない場合\r\n                onAnswerAreaError('正答を配列で指定してください。');\r\n            } else if (props.answer.length === 0) {\r\n                // 正答の配列が空の場合\r\n                onAnswerAreaError('正答を1つ以上指定してください。');\r\n            } else {\r\n                answerArea = <QBCheckboxList style={textFieldStyle} choices={props.choices} setInputAnswer={setInputAnswer} />;\r\n            }\r\n            break;\r\n        default:\r\n            // 回答方法が未指定の場合\r\n            onAnswerAreaError('回答方法を指定してください。');\r\n    }\r\n\r\n    return (\r\n        <Paper className='QuizBoard' elevation={3}>\r\n            <h2>第{props.id}問</h2>\r\n            <p>{props.statement}</p>\r\n            {answerArea}\r\n            <Button\r\n                variant='contained'\r\n                style={buttonStyle}\r\n                disabled={buttonDisabled}\r\n                onClick={onAnswerCheck}\r\n            >\r\n                答え合わせをする\r\n            </Button>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default QuizBoard;\r\n","/**\r\n * この配列にクイズを用意します。\r\n * @param id 問題番号\r\n * @param statement 問題文\r\n * @param type 回答欄の種類 (text, number, radio, checkboxのいずれか)\r\n * @param choices 選択肢 (typeがradio, checkboxのとき、選択肢をオブジェクトの配列で指定する)\r\n * @param answer 正答 (checkboxの場合は配列で指定する)\r\n */\r\nconst quiz = [\r\n    {\r\n        id: 1,\r\n        statement: '10000000の100000倍は1(　　)である。括弧にあてはまる漢字1字を答えよ。',\r\n        type: 'text',\r\n        answer: '兆',\r\n    },\r\n    {\r\n        id: 2,\r\n        statement: '4と6の最小公倍数はいくつか。',\r\n        type: 'number',\r\n        answer: '12',\r\n    },\r\n    {\r\n        id: 3,\r\n        statement: '次のうち、正しい主張はどれか。',\r\n        type: 'radio',\r\n        choices: [\r\n            {\r\n                value: 'choice1',\r\n                label: '偶数と偶数の和は奇数である。',\r\n            },\r\n            {\r\n                value: 'choice2',\r\n                label: '偶数と奇数の和は偶数である。',\r\n            },\r\n            {\r\n                value: 'choice3',\r\n                label: '奇数と偶数の和は奇数である。',\r\n            },\r\n            {\r\n                value: 'choice4',\r\n                label: '奇数と奇数の和は奇数である。',\r\n            },\r\n        ],\r\n        answer: 'choice3',\r\n    },\r\n    {\r\n        id: 4,\r\n        statement: '次のうち、素数であるものをすべて選べ。',\r\n        type: 'checkbox',\r\n        choices: [\r\n            {\r\n                value: 'choice1',\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 'choice2',\r\n                label: '2',\r\n            },\r\n            {\r\n                value: 'choice3',\r\n                label: '3',\r\n            },\r\n            {\r\n                value: 'choice4',\r\n                label: '4',\r\n            },\r\n        ],\r\n        answer: [\r\n            'choice2',\r\n            'choice3',\r\n        ],\r\n    },\r\n    {\r\n        id: 5,\r\n        statement: '回答方法が未指定、もしくは定義されていない回答方法の場合',\r\n    },\r\n    {\r\n        id: 6,\r\n        statement: '回答方法をラジオボタンまたはチェックボックスとし、選択肢を配列で与えていない場合',\r\n        type: 'radio',\r\n        choices: 'something',\r\n        answer: 'something',\r\n    },\r\n    {\r\n        id: 7,\r\n        statement: '回答方法をラジオボタンまたはチェックボックスとし、選択肢の配列が空の場合',\r\n        type: 'checkbox',\r\n        choices: [],\r\n        answer: 'nothing',\r\n    },\r\n    {\r\n        id: 8,\r\n        statement: '回答方法をチェックボックスとし、正答を配列で与えていない場合',\r\n        type: 'checkbox',\r\n        choices: [\r\n            {\r\n                value: 'choice1',\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 'choice2',\r\n                label: '2',\r\n            },\r\n            {\r\n                value: 'choice3',\r\n                label: '3',\r\n            },\r\n            {\r\n                value: 'choice4',\r\n                label: '4',\r\n            },\r\n        ],\r\n        answer: 'choice3',\r\n    },\r\n    {\r\n        id: 9,\r\n        statement: '回答方法をチェックボックスとし、正答の配列が空の場合',\r\n        type: 'checkbox',\r\n        choices: [\r\n            '起',\r\n            '承',\r\n            '転',\r\n            '結',\r\n        ],\r\n        answer: [],\r\n    },\r\n];\r\n\r\nexport default quiz;\r\n","import './App.css';\nimport QuizBoard from './components/quizboard';\nimport quiz from './quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>\n        Reactで簡単なクイズ画面作成\n      </h1>\n      {\n        quiz.map(q => \n          <QuizBoard\n            key={q.id}\n            id={q.id}\n            statement={q.statement}\n            type={q.type}\n            choices={q.choices}\n            answer={q.answer}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}